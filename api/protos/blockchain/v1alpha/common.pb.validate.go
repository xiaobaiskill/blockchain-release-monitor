// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: blockchain/v1alpha/common.proto

package blockchain

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _common_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetAllData with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetAllData) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetAllDataValidationError is the validation error returned by
// GetAllData.Validate if the designated constraints aren't met.
type GetAllDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllDataValidationError) ErrorName() string { return "GetAllDataValidationError" }

// Error satisfies the builtin error interface
func (e GetAllDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllDataValidationError{}

// Validate checks the field values on BlockChain with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BlockChain) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	for idx, item := range m.GetReleases() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BlockChainValidationError{
					field:  fmt.Sprintf("Releases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BlockChainValidationError is the validation error returned by
// BlockChain.Validate if the designated constraints aren't met.
type BlockChainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockChainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockChainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockChainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockChainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockChainValidationError) ErrorName() string { return "BlockChainValidationError" }

// Error satisfies the builtin error interface
func (e BlockChainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockChain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockChainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockChainValidationError{}

// Validate checks the field values on ReleaseInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ReleaseInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectName

	// no validation rules for Version

	// no validation rules for Url

	if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReleaseInfoValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReleaseInfoValidationError is the validation error returned by
// ReleaseInfo.Validate if the designated constraints aren't met.
type ReleaseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseInfoValidationError) ErrorName() string { return "ReleaseInfoValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseInfoValidationError{}
